/* 
Problem 2: Even Fibonacci Numbers
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
By considering the terms in the Fibonacci sequence whose values do not exceed n, find the sum of the even-valued terms.
*/

function fiboEvenSum(n) {
  //hard code first 2 digits. then slice at the end  so that way even if the fibo is of length 1, the slice will accommodate for that by removing the second digit

  const fiboSeries = [1, 2]
  for (let i = 3; i <= n; i++) {
    fiboSeries.push(fiboSeries[i-2]+fiboSeries[i-3]);
  }

  const sumOfEvenNumbers = fiboSeries.reduce((accumulator, currentValue) => {
    if (currentValue % 2 == 0) {
      return accumulator + currentValue
    }
    return accumulator
  }, 0);
  console.log('sum ', sumOfEvenNumbers ,'series -> ', fiboSeries, )
  return sumOfEvenNumbers
}

fiboEvenSum(5)
fiboEvenSum(8)
fiboEvenSum(10)
// console.log(fiboEvenSum(34));
// console.log(fiboEvenSum(60));
// console.log(fiboEvenSum(798));


/* //The real fibonacci sequence which starts from 0
const createFibToNDigits = (sequenceLength) => {
  const fiboSeries = []
  
  for (let i = 0; i < sequenceLength; i++) {

    if (fiboSeries.length == 0) {
      fiboSeries.push(0)
    } 
    else if (fiboSeries.length == 1) {
      fiboSeries.push(1)
    }
    else {
      fiboSeries.push(fiboSeries[i-1]+fiboSeries[i-2])
    }
    
  }
  console.log('fiboSeries.length =', fiboSeries.length , fiboSeries)
}

createFibToNDigits(5)
createFibToNDigits(10) */

